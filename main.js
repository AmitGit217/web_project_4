!function(){"use strict";const t={cardsSection:".elements",cardImagePopup:".popup_image",cardsTemplate:"#card-template",cardClass:".card",cardImageClass:".card__image",cardCaptionClass:".card__caption",cardRemoveButton:".card__removeButton",cardLikeButton:".card__like-button",cardLikeButtonActive:"card__like-button_active",cardCounter:".card__like-counter",deletePopup:".popup_confirm"},e=(document.querySelector(".popup__input_addPhoto_caption"),document.querySelector(".popup__input_addPhoto_ImageURL"),document.querySelector("#addImagePopup__form"),document.querySelector("#addImagePopup"),document.querySelector(t.cardsSection)),{cardClass:s,cardImageClass:r,cardCaptionClass:o,cardRemoveButton:n,cardLikeButton:i,cardLikeButtonActive:a,cardCounter:c}=t;class l{constructor(t,e,o,a,l,u){let{handleLike:d}=u;this.data=t,this._handleClick=o,this._text=t.name,this._link=t.link,this._likesData=t.likes,this._template=e,this._card=document.querySelector(this._template).content.querySelector(s).cloneNode(!0),this._likeButton=this._card.querySelector(i),this._removeButton=this._card.querySelector(n),this._image=this._card.querySelector(r),this._cardCounter=this._card.querySelector(c),this._deleteHandler=a,this._cardId=t._id,this._ownerId=t.owner._id,this._userId=l,this._likeAction=d}_removeCard(){this._card.remove()}_setEventListeners(){this._likeButton.addEventListener("click",(t=>{t.stopPropagation(),this._likeAction(this._cardId)})),this._removeButton.addEventListener("click",(t=>{t.stopPropagation(),this._deleteHandler(this._cardId)})),this._card.addEventListener("click",(()=>{this._handleClick()}))}generateCard(){return this._image.src=this._link,this._image.alt=this._text,this._cardCounter.textContent=this._likesData.length,this._card.querySelector(o).textContent=this._text,this._setEventListeners(),this._userId!==this._ownerId&&(this._removeButton.style.display="none"),this._likesData.some((t=>{t._id===this._userId&&this._likeButton.classList.add(a)})),this._card}}class u{constructor(t){var e,s;s=t=>{"Escape"===t.key&&this.close()},(e="_handleEscClose")in this?Object.defineProperty(this,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[e]=s,this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".popup__close-button"),this._isOpen="popup_show"}open(){this._popup.classList.add(this._isOpen),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove(this._isOpen),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popup.addEventListener("mousedown",(t=>{t.target===t.currentTarget&&this.close()}))}}class d extends u{constructor(t,e){super(t),this._handleSubmit=e,this._inputs=[...this._popup.querySelectorAll(".popup__input")],this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".popup__submit-button")}close(){super.close(),this._form.reset()}getInputValues(){const t={};return this._inputs.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputs.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(t=>{t.preventDefault(),this._handleSubmit(this.getInputValues())}))}}class h{constructor(t,e){this._settings=t,this._formElement=e,this._submit=this._formElement.querySelector(this._settings.submitButtonSelector),this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)]}_disableButtonState(){this._submit.classList.add(this._settings.inactiveButtonClass),this._submit.setAttribute("disabled",!0)}_enableButtonState(){this._submit.classList.remove(this._settings.inactiveButtonClass),this._submit.removeAttribute("disabled",!0)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButtonState():this._enableButtonState()}_resetValidation(){this._disableButtonState(),this._inputList.forEach((t=>{this._hideErrorMessage(t)}))}_showErrorMessage(t){const e=t.validationMessage,s=this._formElement.querySelector(".".concat(t.id,"-error"));s.textContent=e,t.classList.add(this._settings.inputErrorClass),s.classList.add(this._settings.errorClass)}_hideErrorMessage(t){const e=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._settings.inputErrorClass),e.classList.remove(this._settings.errorClass)}_checkInputValidity(t){t.validity.valid?this._hideErrorMessage(t):this._showErrorMessage(t)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._toggleButtonState(),this._formElement.addEventListener("submit",(t=>{t.preventDefault(),this._resetValidation()})),this._setEventListeners()}}function _(t,e){e.textContent=t?"Saving...":e.name}const p=new class{constructor(t){let{URL:e,headers:s}=t;this.url=e,this.headers=s}getUserInfo(){return fetch("".concat(this.url,"/users/me"),{headers:this.headers}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}getInitialCards(){return fetch("".concat(this.url,"/cards"),{headers:this.headers}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}addCard(t){let{name:e,link:s}=t;return fetch("".concat(this.url,"/cards"),{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:s})}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}editProfileServer(t){let{name:e,about:s}=t;return fetch("".concat(this.url,"/users/me"),{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:s})}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}deleteCard(t){return fetch("".concat(this.url,"/cards/").concat(t),{headers:this.headers,method:"DELETE"}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}likeCard(t){return fetch("".concat(this.url,"/cards/likes/").concat(t),{headers:this.headers,method:"PUT"}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}dislikeCard(t){return fetch("".concat(this.url,"/cards/likes/").concat(t),{headers:this.headers,method:"DELETE"}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}updateAvatarImage(t){let{avatar:e}=t;return fetch("".concat(this.url,"/users/me/avatar"),{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status)).catch(console.log)))}}({URL:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:" 4f091419-1c89-4f29-928b-74f786fd1208","Content-Type":"application/json"}});let m;Promise.all([p.getInitialCards(),p.getUserInfo()]).then((t=>{let[e,s]=t;m=s._id,E.renderItems(e),I.setUserInfo({name:s.name,job:s.about,avatar:s.avatar})}));const v=new class extends u{setAction(t){this.handleDelete=t}setEventListeners(){this._popup.addEventListener("submit",(t=>{t.preventDefault(),this.handleDelete(),this.close()})),super.setEventListeners()}}(".popup_confirm");v.setEventListeners();const{cardsTemplate:g}=t,b=document.querySelector(".profile__add-button"),f=e=>{const s=new l(e,g,(()=>{C.open(e)}),(t=>{v.open(),p.deleteCard(t).then((t=>{v.setAction((()=>(s._removeCard(),t)))})).catch((t=>console.log(t)))}),m,{handleLike:e=>{s._likeButton.classList.toggle(t.cardLikeButtonActive),s._likeButton.classList.contains(t.cardLikeButtonActive)?p.likeCard(e).then((t=>{s._cardCounter.textContent=t.likes.length})):p.dislikeCard(e).then((t=>{s._cardCounter.textContent=t.likes.length}))}});return s.generateCard()},E=new class{constructor(t,e){let{renderer:s}=t;this._renderer=s,this._container=e}renderItems(t){t.forEach((t=>{this._renderer(t)}))}setItem(t){this._container.append(t)}prependItem(t){this._container.prepend(t)}}({renderer:t=>{const e=f(t);E.setItem(e)}},e),k=new d("#addImagePopup",(()=>{const{caption:t,image:s}=k.getInputValues();_(!0,k._submitButton),p.addCard({name:t,link:s}).then((t=>{const s=f(t);e.prepend(s)})).catch((t=>console.log(t))).finally(_(!1,k._submitButton)),k.close()})),C=new class extends u{constructor(t){super(t),this._popupImage=document.querySelector(".popup__image"),this._popupCaption=document.querySelector(".popup__caption")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=e,this._popupCaption.textContent=e,super.open()}}(".popup_image"),L={};var S;S={formSelector:".form",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},[...document.querySelectorAll(S.formSelector)].forEach((t=>{const e=new h(S,t),s=t.getAttribute("name");L[s]=e,e.enableValidation()}));const y=document.querySelector("#profilePopup__edit-button"),I=new class{constructor(t){let{name:e,job:s,avatar:r}=t;this._name=document.querySelector(e),this._job=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}setUserInfo(t){let{name:e,job:s,avatar:r}=t;this._name.textContent=e,this._job.textContent=s,this._avatar.src=r}}({name:".profile__name",job:".profile__description",avatar:".profile__avatar-image"}),B=new d("#profilePopup",(()=>{const{fullName:t,description:e}=B.getInputValues();_(!0,B._submitButton),p.editProfileServer({name:t,about:e}).then((s=>(I.setUserInfo({name:t,job:e,avatar:s.avatar}),s))).catch((t=>console.log(t))).finally(_(!1,B._submitButton)),B.close()})),q=document.querySelector(".profile__overlay"),j=new d("#edit-profile-image",(()=>{const{updateImageUrl:t}=j.getInputValues();_(!0,j._submitButton),p.updateAvatarImage({avatar:t}).then((e=>{_(!0,j._submitButton),I.setUserInfo({name:e.name,job:e.about,avatar:t}),j.close()})).catch((t=>console.log(t))).finally(_(!1,j._submitButton)),j.close()}));b.addEventListener("click",(()=>k.open())),q.addEventListener("click",(()=>j.open())),y.addEventListener("click",(()=>{const{name:t,job:e}=I.getUserInfo();B.setInputValues({fullName:t,description:e}),B.open()})),C.setEventListeners(),B.setEventListeners(),k.setEventListeners(),j.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,