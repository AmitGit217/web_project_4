!function(){"use strict";const t={cardsSection:".elements",cardImagePopup:".popup_image",cardsTemplate:"#card-template",cardClass:".card",cardImageClass:".card__image",cardCaptionClass:".card__caption",cardRemoveButton:".card__removeButton",cardLikeButton:".card__like-button",cardLikeButtonActive:"card__like-button_active",cardCounter:".card__like-counter",deletePopup:".popup_confirm"},e=(document.querySelector(".popup__input_addPhoto_caption"),document.querySelector(".popup__input_addPhoto_ImageURL"),document.querySelector("#addImagePopup__form"),document.querySelector("#addImagePopup"),document.querySelector(t.cardsSection)),{cardClass:s,cardImageClass:i,cardCaptionClass:r,cardRemoveButton:n,cardLikeButton:o,cardLikeButtonActive:a,cardCounter:c}=t;class l{constructor(t){let{data:e,template:r,handleClick:a,handleDelete:l,userId:d,handleLike:u}=t;this.data=e,this._handleClick=a,this._text=e.name,this._link=e.link,this._likesData=e.likes,this._template=r,this._card=document.querySelector(this._template).content.querySelector(s).cloneNode(!0),this.likeButton=this._card.querySelector(o),this._removeButton=this._card.querySelector(n),this._image=this._card.querySelector(i),this.cardCounter=this._card.querySelector(c),this._deleteHandler=l,this._cardId=e._id,this._ownerId=e.owner._id,this._userId=d,this._likeAction=u}removeCard(){this._card.remove()}getId(){return this._cardId}isLiked(){if(this.likeButton.classList.contains(t.cardLikeButtonActive))return!0}updateLikes(e){this.cardCounter.textContent=e.length,this.likeButton.classList.toggle(t.cardLikeButtonActive)}_setEventListeners(){this.likeButton.addEventListener("click",(t=>{t.stopPropagation(),this._likeAction(this)})),this._removeButton.addEventListener("click",(t=>{t.stopPropagation(),this._deleteHandler(this)})),this._card.addEventListener("click",(()=>{this._handleClick()}))}generateCard(){return this._image.src=this._link,this._image.alt=this._text,this.cardCounter.textContent=this._likesData.length,this._card.querySelector(r).textContent=this._text,this._setEventListeners(),this._userId!==this._ownerId&&(this._removeButton.style.display="none"),this._likesData.some((t=>{t._id===this._userId&&this.likeButton.classList.add(a)})),this._card}}class d{constructor(t){var e,s;s=t=>{"Escape"===t.key&&this.close()},(e="_handleEscClose")in this?Object.defineProperty(this,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[e]=s,this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".popup__close-button"),this._isOpen="popup_show"}open(){this._popup.classList.add(this._isOpen),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove(this._isOpen),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close())),this._popup.addEventListener("mousedown",(t=>{t.target===t.currentTarget&&this.close()}))}}class u extends d{constructor(t,e){super(t),this._handleSubmit=e,this._inputs=[...this._popup.querySelectorAll(".popup__input")],this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitButtonText}close(){super.close(),this._form.reset()}getInputValues(){const t={};return this._inputs.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputs.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(t=>{t.preventDefault(),this._handleSubmit(this.getInputValues())}))}}class h{constructor(t,e){this._settings=t,this._formElement=e,this._submit=this._formElement.querySelector(this._settings.submitButtonSelector),this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)]}_disableButtonState(){this._submit.classList.add(this._settings.inactiveButtonClass),this._submit.setAttribute("disabled",!0)}_enableButtonState(){this._submit.classList.remove(this._settings.inactiveButtonClass),this._submit.removeAttribute("disabled",!0)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this._disableButtonState():this._enableButtonState()}_resetValidation(){this._disableButtonState(),this._inputList.forEach((t=>{this._hideErrorMessage(t)}))}_showErrorMessage(t){const e=t.validationMessage,s=this._formElement.querySelector(".".concat(t.id,"-error"));s.textContent=e,t.classList.add(this._settings.inputErrorClass),s.classList.add(this._settings.errorClass)}_hideErrorMessage(t){const e=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._settings.inputErrorClass),e.classList.remove(this._settings.errorClass)}_checkInputValidity(t){t.validity.valid?this._hideErrorMessage(t):this._showErrorMessage(t)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._toggleButtonState(),this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._formElement.addEventListener("reset",(()=>{this._resetValidation()})),this._setEventListeners()}}let p;const _=new class{constructor(t){let{URL:e,headers:s}=t;this.url=e,this.headers=s}_customFetch(t,e){return fetch(t,e).then((t=>t.ok?t.json():Promise.reject("Error: ".concat(t.status))))}getUserInfo(){return this._customFetch("".concat(this.url,"/users/me"),{headers:this.headers})}getInitialCards(){return this._customFetch("".concat(this.url,"/cards"),{headers:this.headers})}addCard(t){let{name:e,link:s}=t;return this._customFetch("".concat(this.url,"/cards"),{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:s})})}editProfileServer(t){let{name:e,about:s}=t;return this._customFetch("".concat(this.url,"/users/me"),{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:s})})}deleteCard(t){return this._customFetch("".concat(this.url,"/cards/").concat(t),{headers:this.headers,method:"DELETE"})}likeCard(t){return this._customFetch("".concat(this.url,"/cards/likes/").concat(t),{headers:this.headers,method:"PUT"})}dislikeCard(t){return this._customFetch("".concat(this.url,"/cards/likes/").concat(t),{headers:this.headers,method:"DELETE"})}updateAvatarImage(t){let{avatar:e}=t;return this._customFetch("".concat(this.url,"/users/me/avatar"),{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})})}}({URL:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:" 4f091419-1c89-4f29-928b-74f786fd1208","Content-Type":"application/json"}});Promise.all([_.getInitialCards(),_.getUserInfo()]).then((t=>{let[e,s]=t;p=s._id,L.renderItems(e),I.setUserInfo({name:s.name,job:s.about,avatar:s.avatar})})).catch((t=>console.log(t)));const{cardsTemplate:m}=t,v=document.querySelector(".profile__add-button"),g=t=>new l({data:t,template:m,handleClick:()=>{f.open(t)},handleDelete:t=>{E.open(),E.setAction((()=>_.deleteCard(t.getId()).then((e=>(t.removeCard(),E.close(),e))).catch((t=>console.log(t)))))},userId:p,handleLike:t=>{t.isLiked()?_.dislikeCard(t.getId()).then((e=>{t.updateLikes(e.likes)})).catch((t=>console.log(t))):_.likeCard(t.getId()).then((e=>{t.updateLikes(e.likes)})).catch((t=>console.log(t)))}}).generateCard(),L=new class{constructor(t,e){let{renderer:s}=t;this._renderer=s,this._container=e}renderItems(t){t.forEach((t=>{this._renderer(t)}))}setItem(t){this._container.append(t)}prependItem(t){this._container.prepend(t)}}({renderer:t=>{const e=g(t);L.setItem(e)}},e),b=new u("#addImagePopup",(()=>{const{caption:t,image:s}=b.getInputValues();b.renderLoading(!0),_.addCard({name:t,link:s}).then((t=>{const s=g(t);e.prepend(s),b.close()})).catch((t=>console.log(t))).finally((()=>b.renderLoading(!1)))})),f=new class extends d{constructor(t){super(t),this._popupImage=document.querySelector(".popup__image"),this._popupCaption=document.querySelector(".popup__caption")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=e,this._popupCaption.textContent=e,super.open()}}(".popup_image"),E=new class extends d{setAction(t){this.handleDelete=t}close(){super.close()}setEventListeners(){this._popup.addEventListener("submit",(t=>{t.preventDefault(),this.handleDelete()})),super.setEventListeners()}}(".popup_confirm"),k={};var C;C={formSelector:".form",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},[...document.querySelectorAll(C.formSelector)].forEach((t=>{const e=new h(C,t),s=t.getAttribute("name");k[s]=e,e.enableValidation()}));const S=document.querySelector("#profilePopup__edit-button"),I=new class{constructor(t){let{name:e,job:s,avatar:i}=t;this._name=document.querySelector(e),this._job=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}setUserInfo(t){let{name:e,job:s,avatar:i}=t;this._name.textContent=e,this._job.textContent=s,this._avatar.src=i}}({name:".profile__name",job:".profile__description",avatar:".profile__avatar-image"}),y=new u("#profilePopup",(()=>{const{fullName:t,description:e}=y.getInputValues();y.renderLoading(!0),_.editProfileServer({name:t,about:e}).then((s=>(I.setUserInfo({name:t,job:e,avatar:s.avatar}),y.close(),s))).catch((t=>console.log(t))).finally((()=>y.renderLoading(!1)))})),B=document.querySelector(".profile__overlay"),q=new u("#edit-profile-image",(()=>{const{updateImageUrl:t}=q.getInputValues();q.renderLoading(!0),_.updateAvatarImage({avatar:t}).then((e=>{I.setUserInfo({name:e.name,job:e.about,avatar:t}),q.close()})).catch((t=>console.log(t))).finally((()=>q.renderLoading(!1)))}));v.addEventListener("click",(()=>b.open())),B.addEventListener("click",(()=>q.open())),S.addEventListener("click",(()=>{const{name:t,job:e}=I.getUserInfo();y.setInputValues({fullName:t,description:e}),y.open()})),f.setEventListeners(),y.setEventListeners(),b.setEventListeners(),E.setEventListeners(),q.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,